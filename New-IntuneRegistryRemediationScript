<#
.SYNOPSIS
    Generates Intune registry based detection and remediation scripts based on a CSV input file.

.DESCRIPTION
    This function creates detection and remediation PowerShell scripts by reading registry configuration from a CSV file.
    It supports generating either a detection script, a remediation script, or both.

.PARAMETER inputFilePath
    Specifies the path to the CSV file containing registry key configuration.

.PARAMETER Scope
    Defaults to Detection/Remediation
    Defines whether to generate:
    - "Detection" for a detection script
    - "Remediation" for a remediation script
    - "Detection/Remediation" for both

.EXAMPLE
    New-IntuneRemediationScript -inputFilePath "C:\Configs\RegistryKeys.csv" -Scope "Detection"
    Creates a detection script based on the registry configurations in the CSV file.

.EXAMPLE
    New-IntuneRemediationScript -inputFilePath "C:\Configs\RegistryKeys.csv" -Scope "Remediation"
    Creates a remediation script based on the registry configurations in the CSV file.

.EXAMPLE
    New-IntuneRemediationScript -inputFilePath "C:\Configs\RegistryKeys.csv" -Scope "Detection/Remediation"
    Creates both detection and remediation scripts based on the registry configurations in the CSV file.

.NOTES
    The function uses templates for detection and remediation scripts located at:
    - C:\Users\pag46jll02\test\detect_.ps1
    - C:\Users\pag46jll02\test\remediate_.ps1

    Output scripts are stored in the working directory or specified output directory.

#>
function New-IntuneRegistryRemediationScript {
    param (
        [Parameter(Mandatory = $True)]
        [string]$inputFilePath,
        [Parameter(Mandatory = $False)]
        [ValidateSet("Detection", "Remediation", "Detection/Remediation")]$Scope = "Detection/Remediation"
    )

    #region Declarations
    $FunctionName = $MyInvocation.MyCommand.Name.ToString()
    $date = Get-Date -Format yyyyMMdd-HHmm
    if ($outputdir.Length -eq 0) { $outputdir = $pwd }
    $OutputFilePath = "$OutputDir\$FunctionName-$date.csv"
    $LogFilePath = "$OutputDir\$FunctionName-$date.log"
    $templateDetectionScript = "C:\Users\pag46jll02\test\detect_.ps1"
    $templateRemediationScript = "C:\Users\pag46jll02\test\remediate_.ps1"
    $OutputDetectionScript = "$OutputDir\detect_$FunctionName-$date.ps1"
    $OutputRemediationScript = "$OutputDir\remediate_$FunctionName-$date.ps1"
    #endregion

    # Load CSV
    Try { 
        $inputFilePath.Trim('"')
        $csvData = Import-Csv -Path $inputFilePath -ErrorAction Stop
    }
    Catch {
        Write-Error "Error loading CSV: $($_.Exception.Message)"
        return
    }

    # Generate new $RegistryKeys content
    $registryKeysContent = @()
    $registryKeysContent += "`$RegistryKeys = @("
    foreach ($entry in $csvData) {
        $registryKeysContent += "    @{ Path = `"$($entry.SettingPath)`"; Name = `"$($entry.SettingName)`"; Type = `"$($entry.SettingDataType)`"; Value = `"$($entry.RuleValue)`" }"
    }
    $registryKeysContent += ")"

    #region Detection
    if ($scope -eq "Detection" ) {

        #region Get Template Files
        $detectiontemplateLines = Get-Content $templateDetectionScript
        
        $detectionstartIndex = $detectiontemplateLines.IndexOf('$RegistryKeys = @(')
        $detectionendIndex = $detectiontemplateLines.IndexOf(')')
        
        if ($detectionstartIndex -eq -1 -or $detectionendIndex -eq -1) {
            Write-Warning "Could not find $RegistryKeys block in the detection template. Check the formatting."
            return
        }
        #endregion
        
        #region Build new files
        $detectionnewContent = @()
        $detectionnewContent += $detectiontemplateLines[0..($detectionstartIndex - 1)]
        $detectionnewContent += $registryKeysContent
        $detectionnewContent += $detectiontemplateLines[($detectionendIndex + 1)..($detectiontemplateLines.Length - 1)]
                
        $detectionnewContent | Out-File $OutputDetectionScript -Encoding utf8
        #endregion
        
        Write-Output "Updated detection script saved as: $OutputDetectionScript"
    }
    #endregion

    #region Remediation
    if ($scope -eq "Remediation" ) {

        #region Get Template Files
        $remediationtemplateLines = Get-Content $templateRemediationScript
    
        $remediationstartIndex = $remediationtemplateLines.IndexOf('$RegistryKeys = @(')
        $remediationendIndex = $remediationtemplateLines.IndexOf(')')

        if ($remediationstartIndex -eq -1 -or $remediationendIndex -eq -1) {
            Write-Warning "Could not find $RegistryKeys block in the remediation template. Check the formatting."
            return
        }
        #endregion
    
        #region Build new files
        $remediationnewContent = @()
        $remediationnewContent += $remediationtemplateLines[0..($remediationstartIndex - 1)]
        $remediationnewContent += $registryKeysContent
        $remediationnewContent += $remediationtemplateLines[($remediationendIndex + 1)..($remediationtemplateLines.Length - 1)]
    
        $remediationnewContent | Out-File $OutputRemediationScript -Encoding utf8
        #endregion
    
        Write-Output "Updated remediation script saved as: $OutputRemediationScript"
    }
    #endregion

    #region Detection/Remediation
    if ($scope -eq "Detection/Remediation" ) {

        #region Get Template Files
        $detectiontemplateLines = Get-Content $templateDetectionScript
        $remediationtemplateLines = Get-Content $templateRemediationScript

        $detectionstartIndex = $detectiontemplateLines.IndexOf('$RegistryKeys = @(')
        $detectionendIndex = $detectiontemplateLines.IndexOf(')')
        $remediationstartIndex = $remediationtemplateLines.IndexOf('$RegistryKeys = @(')
        $remediationendIndex = $remediationtemplateLines.IndexOf(')')

        if ($detectionstartIndex -eq -1 -or $detectionendIndex -eq -1) {
            Write-Warning "Could not find $RegistryKeys block in the detection template. Check the formatting."
            return
        }
        if ($remediationstartIndex -eq -1 -or $remediationendIndex -eq -1) {
            Write-Warning "Could not find $RegistryKeys block in the remediation template. Check the formatting."
            return
        }
        #endregion

        #region Build new files
        $detectionnewContent = @()
        $detectionnewContent += $detectiontemplateLines[0..($detectionstartIndex - 1)]
        $detectionnewContent += $registryKeysContent
        $detectionnewContent += $detectiontemplateLines[($detectionendIndex + 1)..($detectiontemplateLines.Length - 1)]

        $remediationnewContent = @()
        $remediationnewContent += $remediationtemplateLines[0..($remediationstartIndex - 1)]
        $remediationnewContent += $registryKeysContent
        $remediationnewContent += $remediationtemplateLines[($remediationendIndex + 1)..($remediationtemplateLines.Length - 1)]

        $detectionnewContent | Out-File $OutputDetectionScript -Encoding utf8
        $remediationnewContent | Out-File $OutputRemediationScript -Encoding utf8
        #endregion

        Write-Output "Updated detection script saved as: $OutputDetectionScript"
        Write-Output "Updated remediation script saved as: $OutputRemediationScript"
    }
    #endregion
}

